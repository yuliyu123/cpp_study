// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeneralHeader.proto

#include "GeneralHeader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace networkif {
namespace protoc {
class AcknowledgeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcknowledgeInfo>
      _instance;
} _AcknowledgeInfo_default_instance_;
class GeneralHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeneralHeader>
      _instance;
} _GeneralHeader_default_instance_;
}  // namespace protoc
}  // namespace networkif
namespace protobuf_GeneralHeader_2eproto {
void InitDefaultsAcknowledgeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::networkif::protoc::_AcknowledgeInfo_default_instance_;
    new (ptr) ::networkif::protoc::AcknowledgeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::networkif::protoc::AcknowledgeInfo::InitAsDefaultInstance();
}

void InitDefaultsAcknowledgeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcknowledgeInfoImpl);
}

void InitDefaultsGeneralHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_GeneralHeader_2eproto::InitDefaultsAcknowledgeInfo();
  {
    void* ptr = &::networkif::protoc::_GeneralHeader_default_instance_;
    new (ptr) ::networkif::protoc::GeneralHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::networkif::protoc::GeneralHeader::InitAsDefaultInstance();
}

void InitDefaultsGeneralHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGeneralHeaderImpl);
}

}  // namespace protobuf_GeneralHeader_2eproto
namespace networkif {
namespace protoc {
bool ConfirmationStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AcknowledgeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcknowledgeInfo::kAckSeqFieldNumber;
const int AcknowledgeInfo::kConfirmationFieldNumber;
const int AcknowledgeInfo::kReasonFieldNumber;
const int AcknowledgeInfo::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcknowledgeInfo::AcknowledgeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GeneralHeader_2eproto::InitDefaultsAcknowledgeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:networkif.protoc.AcknowledgeInfo)
}
AcknowledgeInfo::AcknowledgeInfo(const AcknowledgeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&ackseq_, &from.ackseq_,
    static_cast<size_t>(reinterpret_cast<char*>(&confirmation_) -
    reinterpret_cast<char*>(&ackseq_)) + sizeof(confirmation_));
  // @@protoc_insertion_point(copy_constructor:networkif.protoc.AcknowledgeInfo)
}

void AcknowledgeInfo::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ackseq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transactionid_) -
      reinterpret_cast<char*>(&ackseq_)) + sizeof(transactionid_));
  confirmation_ = 1;
}

AcknowledgeInfo::~AcknowledgeInfo() {
  // @@protoc_insertion_point(destructor:networkif.protoc.AcknowledgeInfo)
  SharedDtor();
}

void AcknowledgeInfo::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcknowledgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AcknowledgeInfo& AcknowledgeInfo::default_instance() {
  ::protobuf_GeneralHeader_2eproto::InitDefaultsAcknowledgeInfo();
  return *internal_default_instance();
}

AcknowledgeInfo* AcknowledgeInfo::New(::google::protobuf::Arena* arena) const {
  AcknowledgeInfo* n = new AcknowledgeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcknowledgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:networkif.protoc.AcknowledgeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&ackseq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transactionid_) -
        reinterpret_cast<char*>(&ackseq_)) + sizeof(transactionid_));
    confirmation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AcknowledgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:networkif.protoc.AcknowledgeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ackSeq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ackseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ackseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .networkif.protoc.ConfirmationStatus confirmation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::networkif::protoc::ConfirmationStatus_IsValid(value)) {
            set_confirmation(static_cast< ::networkif::protoc::ConfirmationStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transactionId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_transactionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transactionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:networkif.protoc.AcknowledgeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:networkif.protoc.AcknowledgeInfo)
  return false;
#undef DO_
}

void AcknowledgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:networkif.protoc.AcknowledgeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ackSeq = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ackseq(), output);
  }

  // required .networkif.protoc.ConfirmationStatus confirmation = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->confirmation(), output);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // optional uint32 transactionId = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->transactionid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:networkif.protoc.AcknowledgeInfo)
}

size_t AcknowledgeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:networkif.protoc.AcknowledgeInfo)
  size_t total_size = 0;

  if (has_ackseq()) {
    // required uint32 ackSeq = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ackseq());
  }

  if (has_confirmation()) {
    // required .networkif.protoc.ConfirmationStatus confirmation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->confirmation());
  }

  return total_size;
}
size_t AcknowledgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:networkif.protoc.AcknowledgeInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required uint32 ackSeq = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ackseq());

    // required .networkif.protoc.ConfirmationStatus confirmation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->confirmation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string reason = 3;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // optional uint32 transactionId = 4;
  if (has_transactionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transactionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcknowledgeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AcknowledgeInfo*>(&from));
}

void AcknowledgeInfo::MergeFrom(const AcknowledgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:networkif.protoc.AcknowledgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      ackseq_ = from.ackseq_;
    }
    if (cached_has_bits & 0x00000004u) {
      transactionid_ = from.transactionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      confirmation_ = from.confirmation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcknowledgeInfo::CopyFrom(const AcknowledgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:networkif.protoc.AcknowledgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcknowledgeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  return true;
}

void AcknowledgeInfo::Swap(AcknowledgeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcknowledgeInfo::InternalSwap(AcknowledgeInfo* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  swap(ackseq_, other->ackseq_);
  swap(transactionid_, other->transactionid_);
  swap(confirmation_, other->confirmation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string AcknowledgeInfo::GetTypeName() const {
  return "networkif.protoc.AcknowledgeInfo";
}


// ===================================================================

void GeneralHeader::InitAsDefaultInstance() {
  ::networkif::protoc::_GeneralHeader_default_instance_._instance.get_mutable()->ackinfo_ = const_cast< ::networkif::protoc::AcknowledgeInfo*>(
      ::networkif::protoc::AcknowledgeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralHeader::kTimestampFieldNumber;
const int GeneralHeader::kAckInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralHeader::GeneralHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_GeneralHeader_2eproto::InitDefaultsGeneralHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:networkif.protoc.GeneralHeader)
}
GeneralHeader::GeneralHeader(const GeneralHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ackinfo()) {
    ackinfo_ = new ::networkif::protoc::AcknowledgeInfo(*from.ackinfo_);
  } else {
    ackinfo_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:networkif.protoc.GeneralHeader)
}

void GeneralHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ackinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&ackinfo_)) + sizeof(timestamp_));
}

GeneralHeader::~GeneralHeader() {
  // @@protoc_insertion_point(destructor:networkif.protoc.GeneralHeader)
  SharedDtor();
}

void GeneralHeader::SharedDtor() {
  if (this != internal_default_instance()) delete ackinfo_;
}

void GeneralHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GeneralHeader& GeneralHeader::default_instance() {
  ::protobuf_GeneralHeader_2eproto::InitDefaultsGeneralHeader();
  return *internal_default_instance();
}

GeneralHeader* GeneralHeader::New(::google::protobuf::Arena* arena) const {
  GeneralHeader* n = new GeneralHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeneralHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:networkif.protoc.GeneralHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ackinfo_ != NULL);
    ackinfo_->Clear();
  }
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeneralHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:networkif.protoc.GeneralHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .networkif.protoc.AcknowledgeInfo ackInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ackinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:networkif.protoc.GeneralHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:networkif.protoc.GeneralHeader)
  return false;
#undef DO_
}

void GeneralHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:networkif.protoc.GeneralHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional .networkif.protoc.AcknowledgeInfo ackInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->ackinfo_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:networkif.protoc.GeneralHeader)
}

size_t GeneralHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:networkif.protoc.GeneralHeader)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }
  // optional .networkif.protoc.AcknowledgeInfo ackInfo = 3;
  if (has_ackinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ackinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GeneralHeader*>(&from));
}

void GeneralHeader::MergeFrom(const GeneralHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:networkif.protoc.GeneralHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ackinfo()->::networkif::protoc::AcknowledgeInfo::MergeFrom(from.ackinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeneralHeader::CopyFrom(const GeneralHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:networkif.protoc.GeneralHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_ackinfo()) {
    if (!this->ackinfo_->IsInitialized()) return false;
  }
  return true;
}

void GeneralHeader::Swap(GeneralHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralHeader::InternalSwap(GeneralHeader* other) {
  using std::swap;
  swap(ackinfo_, other->ackinfo_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string GeneralHeader::GetTypeName() const {
  return "networkif.protoc.GeneralHeader";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protoc
}  // namespace networkif

// @@protoc_insertion_point(global_scope)
